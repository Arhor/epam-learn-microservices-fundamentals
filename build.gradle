plugins {
    id "org.jetbrains.kotlin.jvm" apply false
}

wrapper {
    gradleVersion = project.property("app.version.gradle")
}

subprojects {
    apply plugin: "java"

    java {
        def javaVersion = property("app.version.java")

        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    repositories {
        mavenCentral()
    }

    configurations {
        testImplementation {
            exclude module: "junit-vintage-engine"
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-reflect"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-web"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.mockito.kotlin:mockito-kotlin:${property('app.version.mockitoKotlin')}"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs = [
            "-Xlint:unchecked",
            "-Xlint:deprecation",
        ]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            freeCompilerArgs = [
                "-Xjsr305=strict",
                "-Xjvm-default=all",
                "-Xcontext-receivers",
                "-opt-in=kotlin.RequiresOptIn"
            ]
            jvmTarget = project.property("app.version.java")
            javaParameters = true
        }
    }

    tasks.register("contractTest", Test) {
        group = "verification"
        useJUnitPlatform {
            includeTags "contract"
        }
        shouldRunAfter test
    }

    tasks.register("integrationTest", Test) {
        group = "verification"
        useJUnitPlatform {
            includeTags "integration"
        }
        shouldRunAfter contractTest
    }

    tasks.test {
        useJUnitPlatform {
            excludeTags "contract", "integration"
        }
    }

    tasks.check {
        dependsOn test, contractTest, integrationTest
    }
}
